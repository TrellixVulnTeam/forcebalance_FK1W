\page tutorial Tutorial

This is a tutorial page, but if you haven't installed ForceBalance yet
please go to the Installation page first.  It is very much in process,
and there are many more examples to come.

\section tip4p Fitting a TIP4P potential to QM cluster calculations

After everything is installed, go to the \c studies directory in the distribution
and run:

@verbatim
ForceBalance.py verysimple.in
@endverbatim

If the installation was successful, you will get an output file
similar to \c verysimple.out .  What follows is a description
of the output file and what ForceBalance is actually doing.

ForceBalance begins by reading the force field files from the \c
forcefield directory.  The parameters to be optimized are specified in
the parameter file by adding a special comment inside the file.  For
example, in the \c water.itp file, we specify that the two van der
Waals parameters on oxygen are to be optimized, using the following
syntax:

@verbatim
OW	8     15.99940     0.000       A    3.15365e-01  6.48520e-01 ; PARM 5 6
@endverbatim

The comment <tt>PARM 5 6</tt> signals that "the parameters in fields 5
and 6 are to be optimized."  The force field parser stores the
physical value of the parameter and gives the parameter a name.  These
are printed out in the output file:

@verbatim
Reading force field from file: water.itp

###########################################################
### Starting parameter indices, physical values and IDs ###
###########################################################
   0 [  3.1537e-01 ] : VDWS:OW
   1 [  6.4852e-01 ] : VDWT:OW
   2 [  9.5720e-02 ] : BONDSB:HWOW
   3 [  5.0242e+05 ] : BONDSK:HWOW
   4 [  1.0452e+02 ] : ANGLESB:HWOWHW
   5 [  6.2802e+02 ] : ANGLESK:HWOWHW
   6 [  5.2000e-01 ] : COUL:SOL-2 COUL:SOL-3
   7 [ -1.0400e+00 ] : COUL:SOL-4
   8 [  1.2800e-01 ] : VSITE3B:SOL-4 VSITE3A:SOL-4
-----------------------------------------------------------
@endverbatim

The next section it prints out are a set of rescaling factors which are
important for various aspects of the optimization.  They are discussed
further in this <a href=https://simtk.org/forums/viewtopic.php?f=710&t=3827>forum post</a>.
For now it suffices to say that these values represent the natural size of the parameter,
or more specifically how much the parameter is expected to vary.

@verbatim
##########################################################
###    Rescaling Factors (Lower Takes Precedence):     ###
##########################################################
   BONDSB                               : 5.29177e-02
   BONDSK                               : 9.37583e+05
   VSITE3A                              : 5.29177e-02
   VSITE3B                              : 5.29177e-02
   ANGLESB                              : 5.72958e+01
   VDWS                                 : 5.29177e-02
   ANGLESK                              : 6.05928e+02
   COUL                                 : 1.00000e+00
   VDWT                                 : 2.47894e+00
----------------------------------------------------------
@endverbatim

Next, it prints out user-specified options that pertain to the force
field the targets, the objective function and the optimizer.  Options
that are left at their default values (in this case, most) are not
printed out.  Use <tt>verbose_options True</tt> in the input file to
print out all of the options.

Now for the good stuff - the optimizer begins.  ForceBalance computes
each target and prints out an indicator for each one, then provides
a breakdown of the overall objective function:

@verbatim
##########################################################
###                   Main Optimizer                   ###
###       Newton-Raphson Mode (Adaptive Radius)        ###
##########################################################

Target: cluster-06      Errors: Energy =   9.4124 kJ/mol (34.4605%) Atomic Force (%) =  32.4778 Objective = 1.12062e-01
Target: cluster-12      Errors: Energy =  15.2291 kJ/mol (32.1658%) Atomic Force (%) =  32.3608 Objective = 1.04094e-01

######################################################################
###                  Objective Function Breakdown                  ###
###  Target Name              Residual  x  Weight  =  Contribution ###
######################################################################
cluster-06                     0.11206      0.500      5.60309e-02 
cluster-12                     0.10409      0.500      5.20472e-02 
Regularization                 0.00000      1.000      0.00000e+00 
Total                                                  1.08078e-01 
----------------------------------------------------------------------
  Step       |k|        |dk|       |grad|       -=X2=-     Stdev(X2)    StepQual
     0   0.000e+00   0.000e+00   3.202e+00   1.08078e-01   0.000e+00      1.000
@endverbatim

In this example job, the targets were QM energies and forces for
clusters of 6 and 12 water molecules.  In the initial step (using the
default TIP4P parameters) and for the first target (6-mers), the RMS
error for energies is 9.4124 kJ/mol (34% of the variance in the QM
energies themselves), and the RMS error for atomistic forces is 32%
(again, scaled to the variance of the QM forces).  Similar
information is printed out for the 12-mers.  Each target contributes
to the overall objective function, whose value is 1.080e-01.  The
parameters are at their initial values, which means that any penalty
function will have a value of zero (the Regularization term).

Next, ForceBalance takes a step in the parameter space.  The default
algorithm (a variation of Newton-Raphson) uses first and second
derivative information; the gradient is printed to the screen, as is
the parameter step.

@verbatim
##########################################################
###                   Total Gradient                   ###
##########################################################
   0 [ -1.3660e-01 ] : VDWS:OW
   1 [ -2.2433e-01 ] : VDWT:OW
   2 [ -3.1494e+00 ] : BONDSB:HWOW
   3 [  3.5524e-01 ] : BONDSK:HWOW
   4 [ -3.2448e-01 ] : ANGLESB:HWOWHW
   5 [  8.9350e-02 ] : ANGLESK:HWOWHW
   6 [  0.0000e+00 ] : COUL:SOL-2 COUL:SOL-3
   7 [ -1.6540e-01 ] : COUL:SOL-4
   8 [ -2.2355e-02 ] : VSITE3B:SOL-4 VSITE3A:SOL-4
----------------------------------------------------------

Levenberg-Marquardt: Newton-Raphson step found (length 1.000e-01), Hessian diagonal is scaled by  4.394

##########################################################
###  Mathematical Parameters (Current + Step = Next)   ###
##########################################################
   0 [  0.0000e+00 + 2.1358e-02 =  2.1358e-02 ] : VDWS:OW
   1 [  0.0000e+00 + 1.3608e-02 =  1.3608e-02 ] : VDWT:OW
   2 [  0.0000e+00 + 1.3185e-03 =  1.3185e-03 ] : BONDSB:HWOW
   3 [  0.0000e+00 - 1.4385e-02 = -1.4385e-02 ] : BONDSK:HWOW
   4 [  0.0000e+00 + 1.3960e-03 =  1.3960e-03 ] : ANGLESB:HWOWHW
   5 [  0.0000e+00 - 8.6541e-02 = -8.6541e-02 ] : ANGLESK:HWOWHW
   6 [  0.0000e+00 + 0.0000e+00 =  0.0000e+00 ] : COUL:SOL-2 COUL:SOL-3
   7 [  0.0000e+00 + 5.9651e-03 =  5.9651e-03 ] : COUL:SOL-4
   8 [  0.0000e+00 + 4.0295e-02 =  4.0295e-02 ] : VSITE3B:SOL-4 VSITE3A:SOL-4
----------------------------------------------------------

##########################################################
###    Physical Parameters (Current + Step = Next)     ###
##########################################################
   0 [  3.1537e-01 + 1.1302e-03 =  3.1650e-01 ] : VDWS:OW
   1 [  6.4852e-01 + 3.3734e-02 =  6.8225e-01 ] : VDWT:OW
   2 [  9.5720e-02 + 6.9774e-05 =  9.5790e-02 ] : BONDSB:HWOW
   3 [  5.0242e+05 - 1.3487e+04 =  4.8893e+05 ] : BONDSK:HWOW
   4 [  1.0452e+02 + 7.9985e-02 =  1.0460e+02 ] : ANGLESB:HWOWHW
   5 [  6.2802e+02 - 5.2438e+01 =  5.7558e+02 ] : ANGLESK:HWOWHW
   6 [  5.2000e-01 - 2.3860e-03 =  5.1761e-01 ] : COUL:SOL-2 COUL:SOL-3
   7 [ -1.0400e+00 + 4.7721e-03 = -1.0352e+00 ] : COUL:SOL-4
   8 [  1.2800e-01 + 2.1323e-03 =  1.3013e-01 ] : VSITE3B:SOL-4 VSITE3A:SOL-4
----------------------------------------------------------
@endverbatim

Note that the step length is limited to a "trust radius" of 0.1 - this
option is tunable.  The step in parameter space is given in terms of
the "mathematical parameters" - the internal optimization variables -
and the "physical parameters" which are the actual values in the force
field files.  The mathematical parameters are mainly useful because
they can be used to restart an optimization by creating a \c
read_mvals section to the input file and pasting the lines from the output.

ForceBalance now computes the objective function again, using the new parameter values.

@verbatim
Target: cluster-06      Errors: Energy =   8.6451 kJ/mol (31.6513%) Atomic Force (%) =  28.1040 Objective = 8.95353e-02
Target: cluster-12      Errors: Energy =  14.0941 kJ/mol (29.7686%) Atomic Force (%) =  28.1275 Objective = 8.38673e-02

#####################################################################################
###                         Objective Function Breakdown                          ###
###  Target Name              Residual  x  Weight  =  Contribution (Current-Prev) ###
#####################################################################################
cluster-06                     0.08954      0.500      4.47677e-02 ( -1.126e-02 ) 
cluster-12                     0.08387      0.500      4.19337e-02 ( -1.011e-02 ) 
Regularization                 0.00010      1.000      1.00006e-04 ( +1.000e-04 ) 
Total                                                  8.68013e-02 ( -2.128e-02 ) 
-------------------------------------------------------------------------------------
  Step       |k|        |dk|       |grad|       -=X2=-     Stdev(X2)    StepQual
     1   1.000e-01   1.000e-01   2.281e+00   8.68013e-02   1.064e-02      1.000
@endverbatim

Using the new parameter values, the values for each target have gone
down - that is to say, the force field now produces better agreement
with the reference data.  In the objective function breakdown,
improvements (i.e. decreasing values) from the previous step are
printed in green while increasing values are printed in red.  The
"Regularization" term is printed in red because the parameters have
moved from their initial values, so the penalty function is now finite.

The last line reports:

@li The step number (<tt>Step</tt>)
@li The length of the parameter vector in the mathematical parameter space (<tt>|k|</tt>)
@li The length of the most recent step (<tt>|dk|</tt>)
@li The magnitude of the objective function gradient vector (<tt>|grad|</tt>)
@li The objective function value (<tt>-=X2=-</tt>)
@li The standard deviation of the objective function over a user-specified number of optimization steps
@li The ratio of actual-to-predicted change in the objective function value.  A <tt>StepQual</tt> value of 1.0 signifies that the trust radius can be increased.

Eventually, the optimization will converge.  For this job (and when this documentation was written) it took seven steps:

@verbatim
Target: cluster-06      Errors: Energy =   8.0790 kJ/mol (29.5789%) Atomic Force (%) =  20.9879 Objective = 6.57373e-02
Target: cluster-12      Errors: Energy =  13.1380 kJ/mol (27.7491%) Atomic Force (%) =  21.2594 Objective = 6.10941e-02

#####################################################################################
###                         Objective Function Breakdown                          ###
###  Target Name              Residual  x  Weight  =  Contribution (Current-Prev) ###
#####################################################################################
cluster-06                     0.06574      0.500      3.28686e-02 ( -2.182e-05 ) 
cluster-12                     0.06109      0.500      3.05470e-02 ( -7.147e-05 ) 
Regularization                 0.00148      1.000      1.48377e-03 ( +4.758e-05 ) 
Total                                                  6.48994e-02 ( -4.570e-05 ) 
-------------------------------------------------------------------------------------
  Step       |k|        |dk|       |grad|       -=X2=-     Stdev(X2)    StepQual
     7   3.852e-01   6.595e-03   4.920e-02   6.48994e-02   7.165e-05      0.996

Convergence criterion reached for objective function (1.00e-04)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@           Final objective function value           @@@
@@@  Full:  6.489943e-02  Un-penalized:  6.341566e-02  @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

##########################################################
###           Final optimization parameters:           ###
###           Paste to input file to restart           ###
##########################################################
read_mvals
   0 [  4.1767e-02 ] : VDWS:OW
   1 [  3.1400e-02 ] : VDWT:OW
   2 [  5.3170e-03 ] : BONDSB:HWOW
   3 [ -4.6558e-02 ] : BONDSK:HWOW
   4 [  1.4927e-02 ] : ANGLESB:HWOWHW
   5 [ -3.6741e-01 ] : ANGLESK:HWOWHW
   6 [  0.0000e+00 ] : COUL:SOL-2 COUL:SOL-3
   7 [  9.4636e-03 ] : COUL:SOL-4
   8 [  9.0280e-02 ] : VSITE3B:SOL-4 VSITE3A:SOL-4
/read_mvals

##########################################################
###             Final physical parameters:             ###
##########################################################
   0 [  3.1758e-01 ] : VDWS:OW
   1 [  7.2636e-01 ] : VDWT:OW
   2 [  9.6001e-02 ] : BONDSB:HWOW
   3 [  4.5876e+05 ] : BONDSK:HWOW
   4 [  1.0538e+02 ] : ANGLESB:HWOWHW
   5 [  4.0540e+02 ] : ANGLESK:HWOWHW
   6 [  5.1621e-01 ] : COUL:SOL-2 COUL:SOL-3
   7 [ -1.0324e+00 ] : COUL:SOL-4
   8 [  1.3278e-01 ] : VSITE3B:SOL-4 VSITE3A:SOL-4
----------------------------------------------------------
@endverbatim

As you can see, the objective function has decreased considerably
since the previous step, and most of the improvement was due to
reducing the error in the atomistic forces.  In the \c result
directory, you will find an updated \c water.itp file with the
optimized parameter values.  

This newly generated force field is a better fit to the reference
data, but is it actually a better force field or did we just overfit
the data?  To answer this question, look at \c validate.in where the
job type is set to \c single, and there are many more targets.  In
particular, we are now including QM energies and forces for many
cluster sizes ranging from 2 to 12.

Take the \c read_mvals section from the output file of your previous
run, paste it intointo the \c $options section of \c validate.in, and run
<tt>ForceBalance.py validate.in</tt> .  ForceBalance will now evaluate
the objective function using the force field parameters from the
previous optimization.

You should see the following output:

@verbatim
Target: cluster-02      Errors: Energy =   2.7005 kJ/mol (30.0302%) Atomic Force (%) =  21.6334 Objective = 6.72502e-02
Target: cluster-03      Errors: Energy =   4.2160 kJ/mol (31.5392%) Atomic Force (%) =  20.9368 Objective = 7.16864e-02
Target: cluster-04      Errors: Energy =   5.3841 kJ/mol (31.5522%) Atomic Force (%) =  20.9395 Objective = 7.16537e-02
Target: cluster-05      Errors: Energy =   6.5485 kJ/mol (31.2916%) Atomic Force (%) =  20.8474 Objective = 7.07190e-02
Target: cluster-06      Errors: Energy =   8.0790 kJ/mol (29.5789%) Atomic Force (%) =  20.9879 Objective = 6.57372e-02
Target: cluster-07      Errors: Energy =   9.1547 kJ/mol (32.1196%) Atomic Force (%) =  21.3219 Objective = 7.43141e-02
Target: cluster-08      Errors: Energy =  10.0994 kJ/mol (29.7233%) Atomic Force (%) =  21.4583 Objective = 6.71937e-02
Target: cluster-09      Errors: Energy =  10.8303 kJ/mol (29.2515%) Atomic Force (%) =  21.1871 Objective = 6.52168e-02
Target: cluster-10      Errors: Energy =  11.5504 kJ/mol (28.5596%) Atomic Force (%) =  21.3929 Objective = 6.36629e-02
Target: cluster-11      Errors: Energy =  12.8864 kJ/mol (27.3796%) Atomic Force (%) =  21.4805 Objective = 6.05357e-02
Target: cluster-12      Errors: Energy =  13.1380 kJ/mol (27.7491%) Atomic Force (%) =  21.2593 Objective = 6.10940e-02
Target: cluster-13      Errors: Energy =  13.8261 kJ/mol (27.3540%) Atomic Force (%) =  21.4092 Objective = 6.03483e-02
Target: cluster-14      Errors: Energy =  14.1857 kJ/mol (25.8886%) Atomic Force (%) =  21.3174 Objective = 5.62253e-02

######################################################################
###                  Objective Function Breakdown                  ###
###  Target Name              Residual  x  Weight  =  Contribution ###
######################################################################
cluster-02                     0.06725      0.077      5.17309e-03 
cluster-03                     0.07169      0.077      5.51434e-03 
cluster-04                     0.07165      0.077      5.51182e-03 
cluster-05                     0.07072      0.077      5.43992e-03 
cluster-06                     0.06574      0.077      5.05671e-03 
cluster-07                     0.07431      0.077      5.71647e-03 
cluster-08                     0.06719      0.077      5.16875e-03 
cluster-09                     0.06522      0.077      5.01668e-03 
cluster-10                     0.06366      0.077      4.89714e-03 
cluster-11                     0.06054      0.077      4.65659e-03 
cluster-12                     0.06109      0.077      4.69954e-03 
cluster-13                     0.06035      0.077      4.64217e-03 
cluster-14                     0.05623      0.077      4.32502e-03 
Regularization                 0.00148      1.000      1.48379e-03 
Total                                                  6.73020e-02 
----------------------------------------------------------------------
@endverbatim

As you can see, the agreement is comparable for all of the cluster
sizes, and this effectively means that we were able to achieve an
accurate fit to QM energies and forces for a wide range of cluster
sizes using only the 6-mers and 12-mers.  

A truly good force field needs to accurately reproduce experimental
measurements, but these are more difficult to compute and optimize.
ForceBalance provides methods for optimizing using experimental
targets, but it is beyond the scope of this tutorial.  However,
hopefully this simple example helps to explain how force field
optimization works within the framework of ForceBalance.

Feel free to explore using the other provided input files:

@li \c 0.energy_force.in uses all of the targets - cluster sizes 2 through 14 - in the optimization.
@li \c 1.netforce_torque.in includes net forces on water molecules and torques in the optimization.
@li \c 2.L1_penalty.in uses a L1 penalty function, effectively causing only some parameters to change and not others.
@li \c 3.no_penalty.in illustrates what happens when no penalty function is used at all.
@li \c 4.change_factor.in shows the effect of changing the rescaling factors.
@li \c 5.gradient.in performs a finite-difference check on the objective function gradient.

