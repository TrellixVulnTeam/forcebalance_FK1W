\page usage Usage

This page describes how to use the ForceBalance software.

A good starting point for using this software package is to run the
scripts contained in the \c bin directory on the example jobs in the
\c studies directory.

\c ForceBalance.py is the main executable script for force field
optimization.  It requires an input file and a \ref
directory_structure.  \c MakeInputFile.py will create an example input
file that contains all options, their default values, and a short
description for each option.  There are plans to automatically
generate the correct input file from the provided directory structure,
but for now the autogenerated input file provides the hardcoded
default options.

@section input_file Input file

A typical input file for ForceBalance might look something like this:

@verbatim
$options
jobtype                  newton
gmxpath                  /home/leeping/opt/gromacs-4.5.5/bin
forcefield               water.itp
penalty_multiplicative   0.01
convergence_objective    1e-6
convergence_step         1e-6
convergence_gradient     1e-4
$end

$simulation
simtype                  abinitio_gmx
name                     water12_gen1
weight                   1
efweight                 0.5
shots                    300
$end

$simulation
simtype                  abinitio_gmx
name                     water12_gen2
weight                   1
efweight                 0.5
shots                    300
$end
@endverbatim

Global options for a ForceBalance job are given in the \c $options
section while the settings for each fitting simulation are given in
the \c $simulation sections.  These are the only two section types.

The most important general options to note are: \c jobtype specifies
the optimization algorithm to use and \c forcefield specifies the
force field file name (there may be more than one of these).  The most
important simulation options to note are: \c simtype specifies the
type of fitting simulation and \c name specifies the simulation name
(must correspond to a subdirectory in \c simulations/ ).  All options
are explained in the Option Index.

@section directory_structure Directory structure

The directory structure for our example job would look like:

@verbatim
<root>
  +- forcefield
  |   |- water.itp
  +- simulations
  |   +- water12_gen1
  |   |   |- all.gro (containing 300 geometries)
  |   |   |- qdata.txt
  |   |   |- shot.mdp
  |   |   |- topol.top
  |   +- water12_gen2
  |   |   |- all.gro (containing 300 geometries)
  |   |   |- qdata.txt
  |   |   |- shot.mdp
  |   |   |- topol.top
  |- input_file.in
  +- temp
  |   |- iter_0001
  |   |- iter_0002
  |   |   |- <files generated during runtime>
  +- result
  |   |- water.itp (Optimized force field, generated on completion)
  |- input.in (ForceBalance input file)
@endverbatim

The top-level directory names \b forcefield and \b simulations are
fixed and cannot be changed.  \b forcefield contains the force field
files that you're optimizing, and \b simulations contains all of the
fitting simulations and reference data.  Each subdirectory in \b
simulations corresponds to a single fitting simulation, and its
contents depend on the specific kind of simulation and its
corresponding \c FittingSimulation subclass.

The \b temp directory is the temporary workspace of the program, and
the \b result directory is where the optimized force field files are
deposited after the optimization job is done.  These two directories
are created if not already there.

Note the force field file, \c water.itp and the two fitting
simulations \c water12_gen1 and \c water12_gen2 correspond to the
entries in the input file.  There are two energy and force matching
simulations here; each directory contains the relevant geometries (in
\c all.gro ) and reference data (in \c qdata.txt ).
